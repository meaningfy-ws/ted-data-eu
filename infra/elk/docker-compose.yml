version: '3.7'

services:

  # The 'setup' service runs a one-off script which initializes users inside
  # Elasticsearch — such as 'logstash_internal' and 'kibana_system' — with the
  # values of the passwords defined in the '.env' file.
  #
  # This task is only performed during the *initial* startup of the stack. On all
  # subsequent runs, the service simply returns immediately, without performing
  # any modification to existing users.
  setup:
    build:
      context: setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./setup/helpers.sh:/helpers.sh:ro,Z
      - ./setup/roles:/roles:ro,Z
      - setup:/state:Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch

  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
#    ports:
#      - 9200:9200
#      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms10g -Xmx10g
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk
      - proxy-net
    restart: unless-stopped
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true" # <== Enable traefik to proxy this container
      - "traefik.http.routers.${ENVIRONMENT}-elastic.rule=Host(`elastic.${SUBDOMAIN}${DOMAIN}`)" # <== Your Domain Name goes here for the http rule
      - "traefik.http.routers.${ENVIRONMENT}-elastic.entrypoints=web" # <== Defining the entrypoint for http, **ref: line 30
      - "traefik.http.routers.${ENVIRONMENT}-elastic.middlewares=redirect@file" # <== This is a middleware to redirect to https
      - "traefik.http.routers.${ENVIRONMENT}-elastic-secured.rule=Host(`elastic.${SUBDOMAIN}${DOMAIN}`)" # <== Your Domain Name for the https rule
      - "traefik.http.routers.${ENVIRONMENT}-elastic-secured.entrypoints=web-secured" # <== Defining entrypoint for https, **ref: line 31
      - "traefik.http.routers.${ENVIRONMENT}-elastic-secured.tls.certresolver=mytlschallenge" # <== Defining certsresolvers for https
      - "traefik.http.services.${ENVIRONMENT}-elastic-secured.loadbalancer.server.port=9200"
#      - "traefik.http.services.myservice.loadbalancer.server.scheme=http"

#  logstash:
#    build:
#      context: logstash/
#      args:
#        ELASTIC_VERSION: ${ELASTIC_VERSION}
#    volumes:
#      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
#      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
#    ports:
#      - 5044:5044
#      - 50000:50000/tcp
#      - 50000:50000/udp
#      - 9600:9600
#    environment:
#      LS_JAVA_OPTS: -Xms256m -Xmx256m
#      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
#    networks:
#      - elk
#      - proxy-net
#    depends_on:
#      - elasticsearch
#    restart: unless-stopped

  kibana:
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
        KIBANA_PLUGIN_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
#    ports:
#      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      ANONYMOUS_KIBANA_SYSTEM_PASSWORD: ${ANONYMOUS_KIBANA_SYSTEM_PASSWORD:-}
      SERVER_PUBLICBASEURL: ${KIBANA_HOST:-}
      SERVER_MAXPAYLOADBYTES: 3145728

    networks:
      - elk
      - proxy-net
    depends_on:
      - elasticsearch
    restart: unless-stopped
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true" # <== Enable traefik to proxy this container
      - "traefik.http.routers.${ENVIRONMENT}-kibana.rule=Host(`kibana.${SUBDOMAIN}${DOMAIN}`)" # <== Your Domain Name goes here for the http rule
      - "traefik.http.routers.${ENVIRONMENT}-kibana.entrypoints=web" # <== Defining the entrypoint for http, **ref: line 30
      - "traefik.http.routers.${ENVIRONMENT}-kibana.middlewares=redirect@file" # <== This is a middleware to redirect to https
      - "traefik.http.routers.${ENVIRONMENT}-kibana-secured.rule=Host(`kibana.${SUBDOMAIN}${DOMAIN}`)" # <== Your Domain Name for the https rule
      - "traefik.http.routers.${ENVIRONMENT}-kibana-secured.entrypoints=web-secured" # <== Defining entrypoint for https, **ref: line 31
      - "traefik.http.routers.${ENVIRONMENT}-kibana-secured.tls.certResolver=mytlschallenge" # <== Defining certsresolvers for https

networks:
  elk:
    driver: bridge
    internal: true
  proxy-net:
    external:
      name: proxy-net

volumes:
  setup:
    name: elk-setup-volume-${ENVIRONMENT}
  elasticsearch:
    name: elasticsearch-volume-${ENVIRONMENT}
